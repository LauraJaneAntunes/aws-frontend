name: Frontend Deploy Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: Prepare static files
      run: |
        echo "Static HTML/CSS/JS project - no build step needed"
        ls -la

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
        platforms: linux/amd64,linux/arm64

    - name: Debug SSH Connection
      run: |
        echo "Testing SSH connection..."
        echo "Host: ${{ secrets.EC2_HOST }}"
        echo "User: ${{ secrets.EC2_USER }}"
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 10m
        script: |
          # Stop and remove existing container if exists
          docker stop frontend-container || true
          docker rm frontend-container || true
          
          # Remove old image
          docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest || true
          
          # Pull latest image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          
          # Run new container
          docker run -d \
            --name frontend-container \
            -p 3000:80 \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          
          # Verify container is running
          docker ps | grep frontend-container
          
          # Show detailed container info
          docker ps -a
          docker logs frontend-container --tail 20
          
          # Test if service is responding
          sleep 5
          curl -I http://localhost:3000 || echo "Service not responding on port 3000"
          
          # Debug nginx inside container
          docker exec frontend-container nginx -t || echo "Nginx config test failed"
          docker exec frontend-container ps aux || echo "Cannot check processes"
          docker exec frontend-container ls -la /usr/share/nginx/html/ || echo "Cannot list nginx files"
